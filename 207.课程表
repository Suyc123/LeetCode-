现在你总共有 n 门课需要选，记为 0 到 n-1。
在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]
给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？
输入: 2, [[1,0]] 
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。

输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。


解题：
  该题可归类于求图中环路检测问题。
  利用拓扑排序问题（入度优先遍历），首先根据所给列表可以构建图结构，然后进行拓扑排序。即首先遍历入度为0的节点，然后将其出度邻居节点的入度
  减1，如此进行循环，如果每个元素都能够遍历一遍则没有环路出现。
  时间复杂度：O(V + E)
  空间复杂度：O(V)
  
  
  
我的代码：
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[][] Adj = toAdj(numCourses, prerequisites);
        Queue<Integer> q = new LinkedList<Integer>();
        int count = 0;
        int[] inDegree = new int[numCourses];
        for(int i = 0; i < numCourses; i++){
            for(int j = 0; j < numCourses; j++){
                if(Adj[i][j] == 1){
                    inDegree[j] ++;
                }
            }
        }
        
        for(int i = 0; i < numCourses; i++){
            if(inDegree[i] == 0){
                q.add(i);
            }
        }
        
        while(!q.isEmpty()){
            int v = q.poll();
            count ++;
            for(int j = 0; j < numCourses; j++){
                if(Adj[v][j] != 0){
                    Adj[v][j] = 0;
            
                    if(--inDegree[j] == 0){
                        q.add(j);
                    }
                }
            }
            
        }
        if(count != numCourses){
            return false;
        }
        return true;
    }
    
    private int[][] toAdj(int numCourses, int[][] prerequisites){
        int[][] Adj = new int[numCourses][numCourses];
        for(int i = 0; i < prerequisites.length; i ++){
            Adj[prerequisites[i][1]][prerequisites[i][0]] = 1;
        }     
        return Adj;
    }
}



简洁代码：
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegrees = new int[numCourses];
        for(int[] cp : prerequisites) indegrees[cp[0]]++;
        LinkedList<Integer> queue = new LinkedList<>();
        for(int i = 0; i < numCourses; i++){
            if(indegrees[i] == 0) queue.addLast(i);
        }
        while(!queue.isEmpty()) {
            Integer pre = queue.removeFirst();
            numCourses--;
            for(int[] req : prerequisites) {
                if(req[1] != pre) continue;
                if(--indegrees[req[0]] == 0) queue.add(req[0]);
            }
        }
        return numCourses == 0;
    }
}
